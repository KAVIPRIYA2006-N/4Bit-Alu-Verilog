module alu(
  input[3:0]a,b,
  input m,s2,s1,s0,
  output reg[7:0] res
);
  always@(*)begin
    if(m==1'b0)begin
     case({s2,s1,s0})
       3'b000:res=a+b;
       3'b001:res=a-b;
       3'b010:res=a*b;
       3'b011:res=(b!=0)?a/b:8'h00;
       3'b100:res=(b!=0)?a%b:8'h00;
       3'b101:res=a+1;
       3'b110:res=a-1;
       3'b111:res=8'h11;
       default:res=8'h00;
     endcase
    end
    else begin
       case({s2,s1,s0})
         3'b000:res={4'b0000,a|b};
         3'b001:res={4'b0000,a&b};
         3'b010:res={4'b0000,~(a|b)};
         3'b011:res={4'b0000,~(a&b)};
         3'b100:res={4'b0000,a^b};
         3'b101:res={4'b0000,~(a^b)};
         3'b110:res={4'b0000,~a};
         3'b111:res={4'b0000,~b};
       default:res=8'h00;
       endcase
    end
  end
endmodule

       
       
